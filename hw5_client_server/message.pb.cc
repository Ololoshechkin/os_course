// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"
#include <algorithm>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace messages {
  class GetListOfClientsDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            GetListOfClients
    > _instance;
  } _GetListOfClients_default_instance_;
  
  class ListOfClientsDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            ListOfClients
    > _instance;
  } _ListOfClients_default_instance_;
  
  class CreateChatDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<CreateChat> _instance;
  } _CreateChat_default_instance_;
  
  class AcknolageCreatingChatDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            AcknolageCreatingChat
    > _instance;
  } _AcknolageCreatingChat_default_instance_;
  
  class CreateChatAcknolagementDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            CreateChatAcknolagement
    > _instance;
  } _CreateChatAcknolagement_default_instance_;
  
  class ExitChatDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<ExitChat> _instance;
  } _ExitChat_default_instance_;
  
  class MessageDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<Message> _instance;
  } _Message_default_instance_;
  
  class KeepAliveChatRequestDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            KeepAliveChatRequest
    > _instance;
  } _KeepAliveChatRequest_default_instance_;
  
  class KeepAliveChatAnswerDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            KeepAliveChatAnswer
    > _instance;
  } _KeepAliveChatAnswer_default_instance_;
  
  class NoMessagesLeftDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            NoMessagesLeft
    > _instance;
  } _NoMessagesLeft_default_instance_;
  
  class UpdateChatRequestDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            UpdateChatRequest
    > _instance;
  } _UpdateChatRequest_default_instance_;
  
  class ChatRequestsDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<ChatRequests> _instance;
  } _ChatRequests_default_instance_;
  
  class ChosenPartnerDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            ChosenPartner
    > _instance;
  } _ChosenPartner_default_instance_;
  
  class UpdateIncomingMessagesDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<
            UpdateIncomingMessages
    > _instance;
  } _UpdateIncomingMessages_default_instance_;
}  // namespace messages
namespace protobuf_message_2eproto {
  static void InitDefaultsGetListOfClients() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_GetListOfClients_default_instance_;
      new(ptr) ::messages::GetListOfClients();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::GetListOfClients::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_GetListOfClients = {{ATOMIC_VAR_INIT(
                                          ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetListOfClients},
                                 {}};
  
  static void InitDefaultsListOfClients() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_ListOfClients_default_instance_;
      new(ptr) ::messages::ListOfClients();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::ListOfClients::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_ListOfClients = {{ATOMIC_VAR_INIT(
                                       ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListOfClients},
                              {}};
  
  static void InitDefaultsCreateChat() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_CreateChat_default_instance_;
      new(ptr) ::messages::CreateChat();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::CreateChat::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_CreateChat = {{ATOMIC_VAR_INIT(
                                    ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateChat},
                           {}};
  
  static void InitDefaultsAcknolageCreatingChat() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_AcknolageCreatingChat_default_instance_;
      new(ptr) ::messages::AcknolageCreatingChat();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::AcknolageCreatingChat::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_AcknolageCreatingChat = {{ATOMIC_VAR_INIT(
                                               ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcknolageCreatingChat},
                                      {}};
  
  static void InitDefaultsCreateChatAcknolagement() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_CreateChatAcknolagement_default_instance_;
      new(ptr) ::messages::CreateChatAcknolagement();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::CreateChatAcknolagement::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_CreateChatAcknolagement = {{ATOMIC_VAR_INIT(
                                                 ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateChatAcknolagement},
                                        {}};
  
  static void InitDefaultsExitChat() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_ExitChat_default_instance_;
      new(ptr) ::messages::ExitChat();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::ExitChat::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_ExitChat = {{ATOMIC_VAR_INIT(
                                  ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExitChat},
                         {}};
  
  static void InitDefaultsMessage() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_Message_default_instance_;
      new(ptr) ::messages::Message();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::Message::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<0> scc_info_Message = {{ATOMIC_VAR_INIT(
                                                                        ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessage},
                                                               {}};
  
  static void InitDefaultsKeepAliveChatRequest() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_KeepAliveChatRequest_default_instance_;
      new(ptr) ::messages::KeepAliveChatRequest();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::KeepAliveChatRequest::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_KeepAliveChatRequest = {{ATOMIC_VAR_INIT(
                                              ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeepAliveChatRequest},
                                     {}};
  
  static void InitDefaultsKeepAliveChatAnswer() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_KeepAliveChatAnswer_default_instance_;
      new(ptr) ::messages::KeepAliveChatAnswer();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::KeepAliveChatAnswer::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_KeepAliveChatAnswer = {{ATOMIC_VAR_INIT(
                                             ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeepAliveChatAnswer},
                                    {}};
  
  static void InitDefaultsNoMessagesLeft() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_NoMessagesLeft_default_instance_;
      new(ptr) ::messages::NoMessagesLeft();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::NoMessagesLeft::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_NoMessagesLeft = {{ATOMIC_VAR_INIT(
                                        ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNoMessagesLeft},
                               {}};
  
  static void InitDefaultsUpdateChatRequest() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_UpdateChatRequest_default_instance_;
      new(ptr) ::messages::UpdateChatRequest();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::UpdateChatRequest::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_UpdateChatRequest = {{ATOMIC_VAR_INIT(
                                           ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateChatRequest},
                                  {}};
  
  static void InitDefaultsChatRequests() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_ChatRequests_default_instance_;
      new(ptr) ::messages::ChatRequests();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::ChatRequests::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_ChatRequests = {{ATOMIC_VAR_INIT(
                                      ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatRequests},
                             {}};
  
  static void InitDefaultsChosenPartner() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_ChosenPartner_default_instance_;
      new(ptr) ::messages::ChosenPartner();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::ChosenPartner::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_ChosenPartner = {{ATOMIC_VAR_INIT(
                                       ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChosenPartner},
                              {}};
  
  static void InitDefaultsUpdateIncomingMessages() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    {
      void* ptr = &::messages::_UpdateIncomingMessages_default_instance_;
      new(ptr) ::messages::UpdateIncomingMessages();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::messages::UpdateIncomingMessages::InitAsDefaultInstance();
  }
  
  ::google::protobuf::internal::SCCInfo<
          0
  > scc_info_UpdateIncomingMessages = {{ATOMIC_VAR_INIT(
                                                ::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateIncomingMessages},
                                       {}};
  
  void InitDefaults() {
    ::google::protobuf::internal::InitSCC(&scc_info_GetListOfClients.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ListOfClients.base);
    ::google::protobuf::internal::InitSCC(&scc_info_CreateChat.base);
    ::google::protobuf::internal::InitSCC(&scc_info_AcknolageCreatingChat.base);
    ::google::protobuf::internal::InitSCC(
            &scc_info_CreateChatAcknolagement.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ExitChat.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
    ::google::protobuf::internal::InitSCC(&scc_info_KeepAliveChatRequest.base);
    ::google::protobuf::internal::InitSCC(&scc_info_KeepAliveChatAnswer.base);
    ::google::protobuf::internal::InitSCC(&scc_info_NoMessagesLeft.base);
    ::google::protobuf::internal::InitSCC(&scc_info_UpdateChatRequest.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ChatRequests.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ChosenPartner.base);
    ::google::protobuf::internal::InitSCC(
            &scc_info_UpdateIncomingMessages.base);
  }
  
  ::google::protobuf::Metadata file_level_metadata[14];
  const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
          protodesc_cold) = {GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ::messages::GetListOfClients,
          _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          ::messages::GetListOfClients, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::GetListOfClients, session_id_),
          0, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ListOfClients,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ListOfClients, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ListOfClients,
                  session_id_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ListOfClients, client_names_), 0,
          ~0u, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::CreateChat,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::CreateChat, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::messages::CreateChat,
                                                         session_id_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::CreateChat, client_name_), 1,
          0, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::AcknolageCreatingChat,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::AcknolageCreatingChat, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::AcknolageCreatingChat,
                  session_id_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::AcknolageCreatingChat, creator_client_name_), 1,
          0, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::CreateChatAcknolagement,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::CreateChatAcknolagement, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::CreateChatAcknolagement,
                  session_id_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::CreateChatAcknolagement, acknolaged_), 0,
          1, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ExitChat,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ExitChat, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::messages::ExitChat,
                                                         session_id_),
          0, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::messages::Message,
                                                            _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::Message, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::messages::Message,
                                                         session_id_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::Message, message_content_), 1,
          0, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::KeepAliveChatRequest,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::KeepAliveChatRequest, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::KeepAliveChatRequest, session_id_),
          0, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::KeepAliveChatAnswer,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::KeepAliveChatAnswer, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::KeepAliveChatAnswer,
                  session_id_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::KeepAliveChatAnswer, still_in_chat_), 0,
          1, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::NoMessagesLeft,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::NoMessagesLeft, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::NoMessagesLeft, session_id_),
          0, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::UpdateChatRequest,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::UpdateChatRequest, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::UpdateChatRequest, session_id_),
          0, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ChatRequests,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ChatRequests, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ChatRequests,
                  session_id_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ChatRequests, partner_names_), 0,
          ~0u, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ChosenPartner,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ChosenPartner, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ChosenPartner,
                  session_id_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::ChosenPartner, partner_name_), 1,
          0, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::UpdateIncomingMessages,
                  _has_bits_), GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::UpdateIncomingMessages, _internal_metadata_),
          ~0u,  // no _extensions_
          ~0u,  // no _oneof_case_
          ~0u,  // no _weak_field_map_
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                  ::messages::UpdateIncomingMessages, session_id_), 0,};
  static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
          protodesc_cold) = {{0,   6,   sizeof(::messages::GetListOfClients)},
                             {7,   14,  sizeof(::messages::ListOfClients)},
                             {16,  23,  sizeof(::messages::CreateChat)},
                             {25,  32,  sizeof(::messages::AcknolageCreatingChat)},
                             {34,  41,  sizeof(::messages::CreateChatAcknolagement)},
                             {43,  49,  sizeof(::messages::ExitChat)},
                             {50,  57,  sizeof(::messages::Message)},
                             {59,  65,  sizeof(::messages::KeepAliveChatRequest)},
                             {66,  73,  sizeof(::messages::KeepAliveChatAnswer)},
                             {75,  81,  sizeof(::messages::NoMessagesLeft)},
                             {82,  88,  sizeof(::messages::UpdateChatRequest)},
                             {89,  96,  sizeof(::messages::ChatRequests)},
                             {98,  105, sizeof(::messages::ChosenPartner)},
                             {107, 113, sizeof(::messages::UpdateIncomingMessages)},};
  static ::google::protobuf::Message const* const file_default_instances[] = {
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_GetListOfClients_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_ListOfClients_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_CreateChat_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_AcknolageCreatingChat_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_CreateChatAcknolagement_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_ExitChat_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_Message_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_KeepAliveChatRequest_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_KeepAliveChatAnswer_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_NoMessagesLeft_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_UpdateChatRequest_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_ChatRequests_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_ChosenPartner_default_instance_),
          reinterpret_cast<const ::google::protobuf::Message*>(&::messages::_UpdateIncomingMessages_default_instance_),};
  
  void protobuf_AssignDescriptors() {
    AddDescriptors();
    AssignDescriptors("message.proto", schemas, file_default_instances,
                      TableStruct::offsets, file_level_metadata, NULL, NULL);
  }
  
  void protobuf_AssignDescriptorsOnce() {
    static ::google::protobuf::internal::once_flag once;
    ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
  }
  
  void
  protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
  
  void protobuf_RegisterTypes(const ::std::string&) {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
  }
  
  void AddDescriptorsImpl() {
    InitDefaults();
    static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
            protodesc_cold) = {
            "\n\rmessage.proto\022\010messages\"&\n\020GetListOfCl"
                    "ients\022\022\n\nsession_id\030\001 \002(\005\"9\n\rListOfClien"
                    "ts\022\022\n\nsession_id\030\001 \002(\005\022\024\n\014client_names\030\002"
                    " \003(\t\"5\n\nCreateChat\022\022\n\nsession_id\030\001 \002(\005\022\023"
                    "\n\013client_name\030\002 \002(\t\"H\n\025AcknolageCreating"
                    "Chat\022\022\n\nsession_id\030\001 \002(\005\022\033\n\023creator_clie"
                    "nt_name\030\002 \002(\t\"A\n\027CreateChatAcknolagement"
                    "\022\022\n\nsession_id\030\001 \002(\005\022\022\n\nacknolaged\030\002 \002(\010"
                    "\"\036\n\010ExitChat\022\022\n\nsession_id\030\001 \002(\005\"6\n\007Mess"
                    "age\022\022\n\nsession_id\030\001 \002(\005\022\027\n\017message_conte"
                    "nt\030\002 \002(\t\"*\n\024KeepAliveChatRequest\022\022\n\nsess"
                    "ion_id\030\001 \002(\005\"@\n\023KeepAliveChatAnswer\022\022\n\ns"
                    "ession_id\030\001 \002(\005\022\025\n\rstill_in_chat\030\002 \002(\010\"$"
                    "\n\016NoMessagesLeft\022\022\n\nsession_id\030\001 \002(\005\"\'\n\021"
                    "UpdateChatRequest\022\022\n\nsession_id\030\001 \002(\005\"9\n"
                    "\014ChatRequests\022\022\n\nsession_id\030\001 \002(\005\022\025\n\rpar"
                    "tner_names\030\002 \003(\t\"9\n\rChosenPartner\022\022\n\nses"
                    "sion_id\030\001 \002(\005\022\024\n\014partner_name\030\002 \001(\t\",\n\026U"
                    "pdateIncomingMessages\022\022\n\nsession_id\030\001 \002("
                    "\005"};
    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor,
                                                                 761);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "message.proto", &protobuf_RegisterTypes);
  }
  
  void AddDescriptors() {
    static ::google::protobuf::internal::once_flag once;
    ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
  }

// Force AddDescriptors() to be called at dynamic initialization time.
  struct StaticDescriptorInitializer {
    StaticDescriptorInitializer() {
      AddDescriptors();
    }
  } static_descriptor_initializer;
}  // namespace protobuf_message_2eproto
namespace messages {

// ===================================================================
  
  void GetListOfClients::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int GetListOfClients::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  GetListOfClients::GetListOfClients() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_GetListOfClients.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.GetListOfClients)
  }
  
  GetListOfClients::GetListOfClients(const GetListOfClients& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.GetListOfClients)
  }
  
  void GetListOfClients::SharedCtor() {
    session_id_ = 0;
  }
  
  GetListOfClients::~GetListOfClients() {
    // @@protoc_insertion_point(destructor:messages.GetListOfClients)
    SharedDtor();
  }
  
  void GetListOfClients::SharedDtor() {
  }
  
  void GetListOfClients::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* GetListOfClients::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const GetListOfClients& GetListOfClients::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_GetListOfClients.base);
    return *internal_default_instance();
  }
  
  void GetListOfClients::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.GetListOfClients)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool GetListOfClients::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.GetListOfClients)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.GetListOfClients)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.GetListOfClients)
    return false;
#undef DO_
  }
  
  void GetListOfClients::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.GetListOfClients)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.GetListOfClients)
  }
  
  ::google::protobuf::uint8*
  GetListOfClients::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.GetListOfClients)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.GetListOfClients)
    return target;
  }
  
  size_t GetListOfClients::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.GetListOfClients)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void GetListOfClients::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.GetListOfClients)
            GOOGLE_DCHECK_NE(&from, this);
    const GetListOfClients* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const GetListOfClients
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.GetListOfClients)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.GetListOfClients)
      MergeFrom(*source);
    }
  }
  
  void GetListOfClients::MergeFrom(const GetListOfClients& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.GetListOfClients)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  
  void GetListOfClients::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.GetListOfClients)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void GetListOfClients::CopyFrom(const GetListOfClients& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.GetListOfClients)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool GetListOfClients::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
      return false;
    return true;
  }
  
  void GetListOfClients::Swap(GetListOfClients* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void GetListOfClients::InternalSwap(GetListOfClients* other) {
    using std::swap;
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata GetListOfClients::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void ListOfClients::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int ListOfClients::kSessionIdFieldNumber;
  const int ListOfClients::kClientNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  ListOfClients::ListOfClients() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_ListOfClients.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.ListOfClients)
  }
  
  ListOfClients::ListOfClients(const ListOfClients& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_), client_names_(from.client_names_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.ListOfClients)
  }
  
  void ListOfClients::SharedCtor() {
    session_id_ = 0;
  }
  
  ListOfClients::~ListOfClients() {
    // @@protoc_insertion_point(destructor:messages.ListOfClients)
    SharedDtor();
  }
  
  void ListOfClients::SharedDtor() {
  }
  
  void ListOfClients::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* ListOfClients::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const ListOfClients& ListOfClients::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_ListOfClients.base);
    return *internal_default_instance();
  }
  
  void ListOfClients::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.ListOfClients)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    client_names_.Clear();
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool ListOfClients::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.ListOfClients)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
          
          // repeated string client_names = 2;
        case 2: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                         this->add_client_names()));
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->client_names(this->client_names_size() - 1).data(),
                    static_cast<int>(this->client_names(
                            this->client_names_size() - 1).length()),
                    ::google::protobuf::internal::WireFormat::PARSE,
                    "messages.ListOfClients.client_names");
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.ListOfClients)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.ListOfClients)
    return false;
#undef DO_
  }
  
  void ListOfClients::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.ListOfClients)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    
    // repeated string client_names = 2;
    for (int i = 0, n = this->client_names_size(); i < n; i++) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->client_names(i).data(),
              static_cast<int>(this->client_names(i).length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.ListOfClients.client_names");
      ::google::protobuf::internal::WireFormatLite::WriteString(2,
                                                                this->client_names(
                                                                        i),
                                                                output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.ListOfClients)
  }
  
  ::google::protobuf::uint8*
  ListOfClients::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.ListOfClients)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    
    // repeated string client_names = 2;
    for (int i = 0, n = this->client_names_size(); i < n; i++) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->client_names(i).data(),
              static_cast<int>(this->client_names(i).length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.ListOfClients.client_names");
      target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
              2, this->client_names(i), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.ListOfClients)
    return target;
  }
  
  size_t ListOfClients::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.ListOfClients)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    // repeated string client_names = 2;
    total_size += 1 * ::google::protobuf::internal::FromIntSize(
            this->client_names_size());
    for (int i = 0, n = this->client_names_size(); i < n; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
              this->client_names(i));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void ListOfClients::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.ListOfClients)
            GOOGLE_DCHECK_NE(&from, this);
    const ListOfClients* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const ListOfClients
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.ListOfClients)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.ListOfClients)
      MergeFrom(*source);
    }
  }
  
  void ListOfClients::MergeFrom(const ListOfClients& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.ListOfClients)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    client_names_.MergeFrom(from.client_names_);
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  
  void ListOfClients::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.ListOfClients)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void ListOfClients::CopyFrom(const ListOfClients& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.ListOfClients)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool ListOfClients::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
      return false;
    return true;
  }
  
  void ListOfClients::Swap(ListOfClients* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void ListOfClients::InternalSwap(ListOfClients* other) {
    using std::swap;
    client_names_.InternalSwap(CastToBase(&other->client_names_));
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata ListOfClients::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void CreateChat::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int CreateChat::kSessionIdFieldNumber;
  const int CreateChat::kClientNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  CreateChat::CreateChat() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_CreateChat.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.CreateChat)
  }
  
  CreateChat::CreateChat(const CreateChat& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    client_name_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.has_client_name()) {
      client_name_.AssignWithDefault(
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              from.client_name_);
    }
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.CreateChat)
  }
  
  void CreateChat::SharedCtor() {
    client_name_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    session_id_ = 0;
  }
  
  CreateChat::~CreateChat() {
    // @@protoc_insertion_point(destructor:messages.CreateChat)
    SharedDtor();
  }
  
  void CreateChat::SharedDtor() {
    client_name_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  
  void CreateChat::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* CreateChat::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const CreateChat& CreateChat::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_CreateChat.base);
    return *internal_default_instance();
  }
  
  void CreateChat::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.CreateChat)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      client_name_.ClearNonDefaultToEmptyNoArena();
    }
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool CreateChat::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.CreateChat)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
          
          // required string client_name = 2;
        case 2: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                         this->mutable_client_name()));
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->client_name().data(),
                    static_cast<int>(this->client_name().length()),
                    ::google::protobuf::internal::WireFormat::PARSE,
                    "messages.CreateChat.client_name");
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.CreateChat)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.CreateChat)
    return false;
#undef DO_
  }
  
  void CreateChat::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.CreateChat)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    
    // required string client_name = 2;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->client_name().data(),
              static_cast<int>(this->client_name().length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.CreateChat.client_name");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2,
                                                                            this->client_name(),
                                                                            output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.CreateChat)
  }
  
  ::google::protobuf::uint8*
  CreateChat::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.CreateChat)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    
    // required string client_name = 2;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->client_name().data(),
              static_cast<int>(this->client_name().length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.CreateChat.client_name");
      target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
              2, this->client_name(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.CreateChat)
    return target;
  }
  
  size_t CreateChat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:messages.CreateChat)
    size_t total_size = 0;
    if (has_client_name()) {
      // required string client_name = 2;
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->client_name());
    }
    if (has_session_id()) {
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    return total_size;
  }
  
  size_t CreateChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.CreateChat)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
        0) {  // All required fields are present.
      // required string client_name = 2;
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->client_name());
      
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void CreateChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.CreateChat)
            GOOGLE_DCHECK_NE(&from, this);
    const CreateChat* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const CreateChat
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.CreateChat)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.CreateChat)
      MergeFrom(*source);
    }
  }
  
  void CreateChat::MergeFrom(const CreateChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.CreateChat)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 3u) {
      if (cached_has_bits & 0x00000001u) {
        set_has_client_name();
        client_name_.AssignWithDefault(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                from.client_name_);
      }
      if (cached_has_bits & 0x00000002u) {
        session_id_ = from.session_id_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }
  
  void CreateChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.CreateChat)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void CreateChat::CopyFrom(const CreateChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.CreateChat)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool CreateChat::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000003) != 0x00000003)
      return false;
    return true;
  }
  
  void CreateChat::Swap(CreateChat* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void CreateChat::InternalSwap(CreateChat* other) {
    using std::swap;
    client_name_.Swap(&other->client_name_,
                      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                      GetArenaNoVirtual());
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata CreateChat::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void AcknolageCreatingChat::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int AcknolageCreatingChat::kSessionIdFieldNumber;
  const int AcknolageCreatingChat::kCreatorClientNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  AcknolageCreatingChat::AcknolageCreatingChat() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_AcknolageCreatingChat.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.AcknolageCreatingChat)
  }
  
  AcknolageCreatingChat::AcknolageCreatingChat(const AcknolageCreatingChat& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    creator_client_name_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.has_creator_client_name()) {
      creator_client_name_.AssignWithDefault(
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              from.creator_client_name_);
    }
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.AcknolageCreatingChat)
  }
  
  void AcknolageCreatingChat::SharedCtor() {
    creator_client_name_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    session_id_ = 0;
  }
  
  AcknolageCreatingChat::~AcknolageCreatingChat() {
    // @@protoc_insertion_point(destructor:messages.AcknolageCreatingChat)
    SharedDtor();
  }
  
  void AcknolageCreatingChat::SharedDtor() {
    creator_client_name_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  
  void AcknolageCreatingChat::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* AcknolageCreatingChat::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const AcknolageCreatingChat& AcknolageCreatingChat::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_AcknolageCreatingChat.base);
    return *internal_default_instance();
  }
  
  void AcknolageCreatingChat::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.AcknolageCreatingChat)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      creator_client_name_.ClearNonDefaultToEmptyNoArena();
    }
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool AcknolageCreatingChat::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.AcknolageCreatingChat)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
          
          // required string creator_client_name = 2;
        case 2: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                         this->mutable_creator_client_name()));
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->creator_client_name().data(),
                    static_cast<int>(this->creator_client_name().length()),
                    ::google::protobuf::internal::WireFormat::PARSE,
                    "messages.AcknolageCreatingChat.creator_client_name");
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.AcknolageCreatingChat)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.AcknolageCreatingChat)
    return false;
#undef DO_
  }
  
  void AcknolageCreatingChat::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.AcknolageCreatingChat)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    
    // required string creator_client_name = 2;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->creator_client_name().data(),
              static_cast<int>(this->creator_client_name().length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.AcknolageCreatingChat.creator_client_name");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2,
                                                                            this->creator_client_name(),
                                                                            output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.AcknolageCreatingChat)
  }
  
  ::google::protobuf::uint8*
  AcknolageCreatingChat::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.AcknolageCreatingChat)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    
    // required string creator_client_name = 2;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->creator_client_name().data(),
              static_cast<int>(this->creator_client_name().length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.AcknolageCreatingChat.creator_client_name");
      target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
              2, this->creator_client_name(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.AcknolageCreatingChat)
    return target;
  }
  
  size_t AcknolageCreatingChat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:messages.AcknolageCreatingChat)
    size_t total_size = 0;
    if (has_creator_client_name()) {
      // required string creator_client_name = 2;
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->creator_client_name());
    }
    if (has_session_id()) {
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    return total_size;
  }
  
  size_t AcknolageCreatingChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.AcknolageCreatingChat)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
        0) {  // All required fields are present.
      // required string creator_client_name = 2;
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->creator_client_name());
      
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void
  AcknolageCreatingChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.AcknolageCreatingChat)
            GOOGLE_DCHECK_NE(&from, this);
    const AcknolageCreatingChat* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const AcknolageCreatingChat
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.AcknolageCreatingChat)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.AcknolageCreatingChat)
      MergeFrom(*source);
    }
  }
  
  void AcknolageCreatingChat::MergeFrom(const AcknolageCreatingChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.AcknolageCreatingChat)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 3u) {
      if (cached_has_bits & 0x00000001u) {
        set_has_creator_client_name();
        creator_client_name_.AssignWithDefault(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                from.creator_client_name_);
      }
      if (cached_has_bits & 0x00000002u) {
        session_id_ = from.session_id_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }
  
  void
  AcknolageCreatingChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.AcknolageCreatingChat)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void AcknolageCreatingChat::CopyFrom(const AcknolageCreatingChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.AcknolageCreatingChat)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool AcknolageCreatingChat::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000003) != 0x00000003)
      return false;
    return true;
  }
  
  void AcknolageCreatingChat::Swap(AcknolageCreatingChat* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void AcknolageCreatingChat::InternalSwap(AcknolageCreatingChat* other) {
    using std::swap;
    creator_client_name_.Swap(&other->creator_client_name_,
                              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                              GetArenaNoVirtual());
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata AcknolageCreatingChat::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void CreateChatAcknolagement::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int CreateChatAcknolagement::kSessionIdFieldNumber;
  const int CreateChatAcknolagement::kAcknolagedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  CreateChatAcknolagement::CreateChatAcknolagement() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_CreateChatAcknolagement.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.CreateChatAcknolagement)
  }
  
  CreateChatAcknolagement::CreateChatAcknolagement(const CreateChatAcknolagement& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&session_id_, &from.session_id_,
             static_cast<size_t>(reinterpret_cast<char*>(&acknolaged_) -
                                 reinterpret_cast<char*>(&session_id_)) +
             sizeof(acknolaged_));
    // @@protoc_insertion_point(copy_constructor:messages.CreateChatAcknolagement)
  }
  
  void CreateChatAcknolagement::SharedCtor() {
    ::memset(&session_id_, 0, static_cast<size_t>(
                                      reinterpret_cast<char*>(&acknolaged_) -
                                      reinterpret_cast<char*>(&session_id_)) +
                              sizeof(acknolaged_));
  }
  
  CreateChatAcknolagement::~CreateChatAcknolagement() {
    // @@protoc_insertion_point(destructor:messages.CreateChatAcknolagement)
    SharedDtor();
  }
  
  void CreateChatAcknolagement::SharedDtor() {
  }
  
  void CreateChatAcknolagement::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* CreateChatAcknolagement::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const CreateChatAcknolagement& CreateChatAcknolagement::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_CreateChatAcknolagement.base);
    return *internal_default_instance();
  }
  
  void CreateChatAcknolagement::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.CreateChatAcknolagement)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 3u) {
      ::memset(&session_id_, 0, static_cast<size_t>(
                                        reinterpret_cast<char*>(&acknolaged_) -
                                        reinterpret_cast<char*>(&session_id_)) +
                                sizeof(acknolaged_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool CreateChatAcknolagement::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.CreateChatAcknolagement)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
          
          // required bool acknolaged = 2;
        case 2: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
            set_has_acknolaged();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool,
                    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL
            >(input, &acknolaged_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.CreateChatAcknolagement)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.CreateChatAcknolagement)
    return false;
#undef DO_
  }
  
  void CreateChatAcknolagement::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.CreateChatAcknolagement)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    
    // required bool acknolaged = 2;
    if (cached_has_bits & 0x00000002u) {
      ::google::protobuf::internal::WireFormatLite::WriteBool(2,
                                                              this->acknolaged(),
                                                              output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.CreateChatAcknolagement)
  }
  
  ::google::protobuf::uint8*
  CreateChatAcknolagement::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.CreateChatAcknolagement)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    
    // required bool acknolaged = 2;
    if (cached_has_bits & 0x00000002u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2,
                                                                              this->acknolaged(),
                                                                              target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.CreateChatAcknolagement)
    return target;
  }
  
  size_t CreateChatAcknolagement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:messages.CreateChatAcknolagement)
    size_t total_size = 0;
    if (has_session_id()) {
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    if (has_acknolaged()) {
      // required bool acknolaged = 2;
      total_size += 1 + 1;
    }
    return total_size;
  }
  
  size_t CreateChatAcknolagement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.CreateChatAcknolagement)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
        0) {  // All required fields are present.
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
      
      // required bool acknolaged = 2;
      total_size += 1 + 1;
    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void
  CreateChatAcknolagement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.CreateChatAcknolagement)
            GOOGLE_DCHECK_NE(&from, this);
    const CreateChatAcknolagement* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const CreateChatAcknolagement
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.CreateChatAcknolagement)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.CreateChatAcknolagement)
      MergeFrom(*source);
    }
  }
  
  void CreateChatAcknolagement::MergeFrom(const CreateChatAcknolagement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.CreateChatAcknolagement)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 3u) {
      if (cached_has_bits & 0x00000001u) {
        session_id_ = from.session_id_;
      }
      if (cached_has_bits & 0x00000002u) {
        acknolaged_ = from.acknolaged_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }
  
  void
  CreateChatAcknolagement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.CreateChatAcknolagement)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void CreateChatAcknolagement::CopyFrom(const CreateChatAcknolagement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.CreateChatAcknolagement)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool CreateChatAcknolagement::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000003) != 0x00000003)
      return false;
    return true;
  }
  
  void CreateChatAcknolagement::Swap(CreateChatAcknolagement* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void CreateChatAcknolagement::InternalSwap(CreateChatAcknolagement* other) {
    using std::swap;
    swap(session_id_, other->session_id_);
    swap(acknolaged_, other->acknolaged_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata CreateChatAcknolagement::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void ExitChat::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int ExitChat::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  ExitChat::ExitChat() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_ExitChat.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.ExitChat)
  }
  
  ExitChat::ExitChat(const ExitChat& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.ExitChat)
  }
  
  void ExitChat::SharedCtor() {
    session_id_ = 0;
  }
  
  ExitChat::~ExitChat() {
    // @@protoc_insertion_point(destructor:messages.ExitChat)
    SharedDtor();
  }
  
  void ExitChat::SharedDtor() {
  }
  
  void ExitChat::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* ExitChat::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const ExitChat& ExitChat::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_ExitChat.base);
    return *internal_default_instance();
  }
  
  void ExitChat::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.ExitChat)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool ExitChat::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.ExitChat)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.ExitChat)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.ExitChat)
    return false;
#undef DO_
  }
  
  void ExitChat::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.ExitChat)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.ExitChat)
  }
  
  ::google::protobuf::uint8* ExitChat::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.ExitChat)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.ExitChat)
    return target;
  }
  
  size_t ExitChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.ExitChat)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void ExitChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.ExitChat)
            GOOGLE_DCHECK_NE(&from, this);
    const ExitChat* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const ExitChat
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.ExitChat)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.ExitChat)
      MergeFrom(*source);
    }
  }
  
  void ExitChat::MergeFrom(const ExitChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.ExitChat)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  
  void ExitChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.ExitChat)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void ExitChat::CopyFrom(const ExitChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.ExitChat)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool ExitChat::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
      return false;
    return true;
  }
  
  void ExitChat::Swap(ExitChat* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void ExitChat::InternalSwap(ExitChat* other) {
    using std::swap;
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata ExitChat::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void Message::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int Message::kSessionIdFieldNumber;
  const int Message::kMessageContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  Message::Message() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_Message.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.Message)
  }
  
  Message::Message(const Message& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    message_content_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.has_message_content()) {
      message_content_.AssignWithDefault(
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              from.message_content_);
    }
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.Message)
  }
  
  void Message::SharedCtor() {
    message_content_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    session_id_ = 0;
  }
  
  Message::~Message() {
    // @@protoc_insertion_point(destructor:messages.Message)
    SharedDtor();
  }
  
  void Message::SharedDtor() {
    message_content_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  
  void Message::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* Message::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const Message& Message::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_Message.base);
    return *internal_default_instance();
  }
  
  void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.Message)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      message_content_.ClearNonDefaultToEmptyNoArena();
    }
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool Message::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.Message)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
          
          // required string message_content = 2;
        case 2: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                         this->mutable_message_content()));
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->message_content().data(),
                    static_cast<int>(this->message_content().length()),
                    ::google::protobuf::internal::WireFormat::PARSE,
                    "messages.Message.message_content");
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.Message)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.Message)
    return false;
#undef DO_
  }
  
  void Message::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.Message)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    
    // required string message_content = 2;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->message_content().data(),
              static_cast<int>(this->message_content().length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.Message.message_content");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2,
                                                                            this->message_content(),
                                                                            output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.Message)
  }
  
  ::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.Message)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    
    // required string message_content = 2;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->message_content().data(),
              static_cast<int>(this->message_content().length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.Message.message_content");
      target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
              2, this->message_content(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.Message)
    return target;
  }
  
  size_t Message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:messages.Message)
    size_t total_size = 0;
    if (has_message_content()) {
      // required string message_content = 2;
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->message_content());
    }
    if (has_session_id()) {
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    return total_size;
  }
  
  size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.Message)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
        0) {  // All required fields are present.
      // required string message_content = 2;
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->message_content());
      
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.Message)
            GOOGLE_DCHECK_NE(&from, this);
    const Message* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const Message
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.Message)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.Message)
      MergeFrom(*source);
    }
  }
  
  void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.Message)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 3u) {
      if (cached_has_bits & 0x00000001u) {
        set_has_message_content();
        message_content_.AssignWithDefault(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                from.message_content_);
      }
      if (cached_has_bits & 0x00000002u) {
        session_id_ = from.session_id_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }
  
  void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.Message)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.Message)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool Message::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000003) != 0x00000003)
      return false;
    return true;
  }
  
  void Message::Swap(Message* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void Message::InternalSwap(Message* other) {
    using std::swap;
    message_content_.Swap(&other->message_content_,
                          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                          GetArenaNoVirtual());
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata Message::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void KeepAliveChatRequest::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int KeepAliveChatRequest::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  KeepAliveChatRequest::KeepAliveChatRequest() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_KeepAliveChatRequest.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.KeepAliveChatRequest)
  }
  
  KeepAliveChatRequest::KeepAliveChatRequest(const KeepAliveChatRequest& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.KeepAliveChatRequest)
  }
  
  void KeepAliveChatRequest::SharedCtor() {
    session_id_ = 0;
  }
  
  KeepAliveChatRequest::~KeepAliveChatRequest() {
    // @@protoc_insertion_point(destructor:messages.KeepAliveChatRequest)
    SharedDtor();
  }
  
  void KeepAliveChatRequest::SharedDtor() {
  }
  
  void KeepAliveChatRequest::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* KeepAliveChatRequest::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const KeepAliveChatRequest& KeepAliveChatRequest::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_KeepAliveChatRequest.base);
    return *internal_default_instance();
  }
  
  void KeepAliveChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.KeepAliveChatRequest)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool KeepAliveChatRequest::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.KeepAliveChatRequest)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.KeepAliveChatRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.KeepAliveChatRequest)
    return false;
#undef DO_
  }
  
  void KeepAliveChatRequest::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.KeepAliveChatRequest)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.KeepAliveChatRequest)
  }
  
  ::google::protobuf::uint8*
  KeepAliveChatRequest::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.KeepAliveChatRequest)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.KeepAliveChatRequest)
    return target;
  }
  
  size_t KeepAliveChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.KeepAliveChatRequest)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void
  KeepAliveChatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.KeepAliveChatRequest)
            GOOGLE_DCHECK_NE(&from, this);
    const KeepAliveChatRequest* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const KeepAliveChatRequest
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.KeepAliveChatRequest)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.KeepAliveChatRequest)
      MergeFrom(*source);
    }
  }
  
  void KeepAliveChatRequest::MergeFrom(const KeepAliveChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.KeepAliveChatRequest)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  
  void KeepAliveChatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.KeepAliveChatRequest)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void KeepAliveChatRequest::CopyFrom(const KeepAliveChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.KeepAliveChatRequest)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool KeepAliveChatRequest::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
      return false;
    return true;
  }
  
  void KeepAliveChatRequest::Swap(KeepAliveChatRequest* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void KeepAliveChatRequest::InternalSwap(KeepAliveChatRequest* other) {
    using std::swap;
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata KeepAliveChatRequest::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void KeepAliveChatAnswer::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int KeepAliveChatAnswer::kSessionIdFieldNumber;
  const int KeepAliveChatAnswer::kStillInChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  KeepAliveChatAnswer::KeepAliveChatAnswer() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_KeepAliveChatAnswer.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.KeepAliveChatAnswer)
  }
  
  KeepAliveChatAnswer::KeepAliveChatAnswer(const KeepAliveChatAnswer& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&session_id_, &from.session_id_,
             static_cast<size_t>(reinterpret_cast<char*>(&still_in_chat_) -
                                 reinterpret_cast<char*>(&session_id_)) +
             sizeof(still_in_chat_));
    // @@protoc_insertion_point(copy_constructor:messages.KeepAliveChatAnswer)
  }
  
  void KeepAliveChatAnswer::SharedCtor() {
    ::memset(&session_id_, 0, static_cast<size_t>(
                                      reinterpret_cast<char*>(&still_in_chat_) -
                                      reinterpret_cast<char*>(&session_id_)) +
                              sizeof(still_in_chat_));
  }
  
  KeepAliveChatAnswer::~KeepAliveChatAnswer() {
    // @@protoc_insertion_point(destructor:messages.KeepAliveChatAnswer)
    SharedDtor();
  }
  
  void KeepAliveChatAnswer::SharedDtor() {
  }
  
  void KeepAliveChatAnswer::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* KeepAliveChatAnswer::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const KeepAliveChatAnswer& KeepAliveChatAnswer::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_KeepAliveChatAnswer.base);
    return *internal_default_instance();
  }
  
  void KeepAliveChatAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.KeepAliveChatAnswer)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 3u) {
      ::memset(&session_id_, 0, static_cast<size_t>(
                                        reinterpret_cast<char*>(&still_in_chat_) -
                                        reinterpret_cast<char*>(&session_id_)) +
                                sizeof(still_in_chat_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool KeepAliveChatAnswer::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.KeepAliveChatAnswer)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
          
          // required bool still_in_chat = 2;
        case 2: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
            set_has_still_in_chat();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool,
                    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL
            >(input, &still_in_chat_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.KeepAliveChatAnswer)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.KeepAliveChatAnswer)
    return false;
#undef DO_
  }
  
  void KeepAliveChatAnswer::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.KeepAliveChatAnswer)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    
    // required bool still_in_chat = 2;
    if (cached_has_bits & 0x00000002u) {
      ::google::protobuf::internal::WireFormatLite::WriteBool(2,
                                                              this->still_in_chat(),
                                                              output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.KeepAliveChatAnswer)
  }
  
  ::google::protobuf::uint8*
  KeepAliveChatAnswer::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.KeepAliveChatAnswer)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    
    // required bool still_in_chat = 2;
    if (cached_has_bits & 0x00000002u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2,
                                                                              this->still_in_chat(),
                                                                              target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.KeepAliveChatAnswer)
    return target;
  }
  
  size_t KeepAliveChatAnswer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:messages.KeepAliveChatAnswer)
    size_t total_size = 0;
    if (has_session_id()) {
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    if (has_still_in_chat()) {
      // required bool still_in_chat = 2;
      total_size += 1 + 1;
    }
    return total_size;
  }
  
  size_t KeepAliveChatAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.KeepAliveChatAnswer)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
        0) {  // All required fields are present.
      // required int32 session_id = 1;
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
      
      // required bool still_in_chat = 2;
      total_size += 1 + 1;
    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void KeepAliveChatAnswer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.KeepAliveChatAnswer)
            GOOGLE_DCHECK_NE(&from, this);
    const KeepAliveChatAnswer* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const KeepAliveChatAnswer
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.KeepAliveChatAnswer)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.KeepAliveChatAnswer)
      MergeFrom(*source);
    }
  }
  
  void KeepAliveChatAnswer::MergeFrom(const KeepAliveChatAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.KeepAliveChatAnswer)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 3u) {
      if (cached_has_bits & 0x00000001u) {
        session_id_ = from.session_id_;
      }
      if (cached_has_bits & 0x00000002u) {
        still_in_chat_ = from.still_in_chat_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }
  
  void KeepAliveChatAnswer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.KeepAliveChatAnswer)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void KeepAliveChatAnswer::CopyFrom(const KeepAliveChatAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.KeepAliveChatAnswer)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool KeepAliveChatAnswer::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000003) != 0x00000003)
      return false;
    return true;
  }
  
  void KeepAliveChatAnswer::Swap(KeepAliveChatAnswer* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void KeepAliveChatAnswer::InternalSwap(KeepAliveChatAnswer* other) {
    using std::swap;
    swap(session_id_, other->session_id_);
    swap(still_in_chat_, other->still_in_chat_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata KeepAliveChatAnswer::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void NoMessagesLeft::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int NoMessagesLeft::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  NoMessagesLeft::NoMessagesLeft() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_NoMessagesLeft.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.NoMessagesLeft)
  }
  
  NoMessagesLeft::NoMessagesLeft(const NoMessagesLeft& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.NoMessagesLeft)
  }
  
  void NoMessagesLeft::SharedCtor() {
    session_id_ = 0;
  }
  
  NoMessagesLeft::~NoMessagesLeft() {
    // @@protoc_insertion_point(destructor:messages.NoMessagesLeft)
    SharedDtor();
  }
  
  void NoMessagesLeft::SharedDtor() {
  }
  
  void NoMessagesLeft::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* NoMessagesLeft::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const NoMessagesLeft& NoMessagesLeft::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_NoMessagesLeft.base);
    return *internal_default_instance();
  }
  
  void NoMessagesLeft::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.NoMessagesLeft)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool NoMessagesLeft::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.NoMessagesLeft)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.NoMessagesLeft)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.NoMessagesLeft)
    return false;
#undef DO_
  }
  
  void NoMessagesLeft::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.NoMessagesLeft)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.NoMessagesLeft)
  }
  
  ::google::protobuf::uint8*
  NoMessagesLeft::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.NoMessagesLeft)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.NoMessagesLeft)
    return target;
  }
  
  size_t NoMessagesLeft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.NoMessagesLeft)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void NoMessagesLeft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.NoMessagesLeft)
            GOOGLE_DCHECK_NE(&from, this);
    const NoMessagesLeft* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const NoMessagesLeft
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.NoMessagesLeft)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.NoMessagesLeft)
      MergeFrom(*source);
    }
  }
  
  void NoMessagesLeft::MergeFrom(const NoMessagesLeft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.NoMessagesLeft)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  
  void NoMessagesLeft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.NoMessagesLeft)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void NoMessagesLeft::CopyFrom(const NoMessagesLeft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.NoMessagesLeft)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool NoMessagesLeft::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
      return false;
    return true;
  }
  
  void NoMessagesLeft::Swap(NoMessagesLeft* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void NoMessagesLeft::InternalSwap(NoMessagesLeft* other) {
    using std::swap;
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata NoMessagesLeft::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void UpdateChatRequest::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int UpdateChatRequest::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  UpdateChatRequest::UpdateChatRequest() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_UpdateChatRequest.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.UpdateChatRequest)
  }
  
  UpdateChatRequest::UpdateChatRequest(const UpdateChatRequest& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.UpdateChatRequest)
  }
  
  void UpdateChatRequest::SharedCtor() {
    session_id_ = 0;
  }
  
  UpdateChatRequest::~UpdateChatRequest() {
    // @@protoc_insertion_point(destructor:messages.UpdateChatRequest)
    SharedDtor();
  }
  
  void UpdateChatRequest::SharedDtor() {
  }
  
  void UpdateChatRequest::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* UpdateChatRequest::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const UpdateChatRequest& UpdateChatRequest::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_UpdateChatRequest.base);
    return *internal_default_instance();
  }
  
  void UpdateChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.UpdateChatRequest)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool UpdateChatRequest::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.UpdateChatRequest)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.UpdateChatRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.UpdateChatRequest)
    return false;
#undef DO_
  }
  
  void UpdateChatRequest::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.UpdateChatRequest)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.UpdateChatRequest)
  }
  
  ::google::protobuf::uint8*
  UpdateChatRequest::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.UpdateChatRequest)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.UpdateChatRequest)
    return target;
  }
  
  size_t UpdateChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.UpdateChatRequest)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void UpdateChatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.UpdateChatRequest)
            GOOGLE_DCHECK_NE(&from, this);
    const UpdateChatRequest* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const UpdateChatRequest
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.UpdateChatRequest)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.UpdateChatRequest)
      MergeFrom(*source);
    }
  }
  
  void UpdateChatRequest::MergeFrom(const UpdateChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.UpdateChatRequest)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  
  void UpdateChatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.UpdateChatRequest)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void UpdateChatRequest::CopyFrom(const UpdateChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.UpdateChatRequest)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool UpdateChatRequest::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
      return false;
    return true;
  }
  
  void UpdateChatRequest::Swap(UpdateChatRequest* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void UpdateChatRequest::InternalSwap(UpdateChatRequest* other) {
    using std::swap;
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata UpdateChatRequest::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void ChatRequests::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int ChatRequests::kSessionIdFieldNumber;
  const int ChatRequests::kPartnerNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  ChatRequests::ChatRequests() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_ChatRequests.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.ChatRequests)
  }
  
  ChatRequests::ChatRequests(const ChatRequests& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_), partner_names_(from.partner_names_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.ChatRequests)
  }
  
  void ChatRequests::SharedCtor() {
    session_id_ = 0;
  }
  
  ChatRequests::~ChatRequests() {
    // @@protoc_insertion_point(destructor:messages.ChatRequests)
    SharedDtor();
  }
  
  void ChatRequests::SharedDtor() {
  }
  
  void ChatRequests::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* ChatRequests::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const ChatRequests& ChatRequests::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_ChatRequests.base);
    return *internal_default_instance();
  }
  
  void ChatRequests::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.ChatRequests)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    partner_names_.Clear();
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool ChatRequests::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.ChatRequests)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
          
          // repeated string partner_names = 2;
        case 2: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                         this->add_partner_names()));
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->partner_names(this->partner_names_size() - 1).data(),
                    static_cast<int>(this->partner_names(
                            this->partner_names_size() - 1).length()),
                    ::google::protobuf::internal::WireFormat::PARSE,
                    "messages.ChatRequests.partner_names");
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.ChatRequests)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.ChatRequests)
    return false;
#undef DO_
  }
  
  void ChatRequests::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.ChatRequests)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    
    // repeated string partner_names = 2;
    for (int i = 0, n = this->partner_names_size(); i < n; i++) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->partner_names(i).data(),
              static_cast<int>(this->partner_names(i).length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.ChatRequests.partner_names");
      ::google::protobuf::internal::WireFormatLite::WriteString(2,
                                                                this->partner_names(
                                                                        i),
                                                                output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.ChatRequests)
  }
  
  ::google::protobuf::uint8*
  ChatRequests::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.ChatRequests)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    
    // repeated string partner_names = 2;
    for (int i = 0, n = this->partner_names_size(); i < n; i++) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->partner_names(i).data(),
              static_cast<int>(this->partner_names(i).length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.ChatRequests.partner_names");
      target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
              2, this->partner_names(i), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.ChatRequests)
    return target;
  }
  
  size_t ChatRequests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.ChatRequests)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    // repeated string partner_names = 2;
    total_size += 1 * ::google::protobuf::internal::FromIntSize(
            this->partner_names_size());
    for (int i = 0, n = this->partner_names_size(); i < n; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
              this->partner_names(i));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void ChatRequests::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.ChatRequests)
            GOOGLE_DCHECK_NE(&from, this);
    const ChatRequests* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const ChatRequests
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.ChatRequests)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.ChatRequests)
      MergeFrom(*source);
    }
  }
  
  void ChatRequests::MergeFrom(const ChatRequests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.ChatRequests)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    partner_names_.MergeFrom(from.partner_names_);
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  
  void ChatRequests::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.ChatRequests)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void ChatRequests::CopyFrom(const ChatRequests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.ChatRequests)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool ChatRequests::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
      return false;
    return true;
  }
  
  void ChatRequests::Swap(ChatRequests* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void ChatRequests::InternalSwap(ChatRequests* other) {
    using std::swap;
    partner_names_.InternalSwap(CastToBase(&other->partner_names_));
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata ChatRequests::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void ChosenPartner::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int ChosenPartner::kSessionIdFieldNumber;
  const int ChosenPartner::kPartnerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  ChosenPartner::ChosenPartner() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_ChosenPartner.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.ChosenPartner)
  }
  
  ChosenPartner::ChosenPartner(const ChosenPartner& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    partner_name_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.has_partner_name()) {
      partner_name_.AssignWithDefault(
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              from.partner_name_);
    }
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.ChosenPartner)
  }
  
  void ChosenPartner::SharedCtor() {
    partner_name_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    session_id_ = 0;
  }
  
  ChosenPartner::~ChosenPartner() {
    // @@protoc_insertion_point(destructor:messages.ChosenPartner)
    SharedDtor();
  }
  
  void ChosenPartner::SharedDtor() {
    partner_name_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  
  void ChosenPartner::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* ChosenPartner::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const ChosenPartner& ChosenPartner::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_ChosenPartner.base);
    return *internal_default_instance();
  }
  
  void ChosenPartner::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.ChosenPartner)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      partner_name_.ClearNonDefaultToEmptyNoArena();
    }
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool ChosenPartner::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.ChosenPartner)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
          
          // optional string partner_name = 2;
        case 2: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                         this->mutable_partner_name()));
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->partner_name().data(),
                    static_cast<int>(this->partner_name().length()),
                    ::google::protobuf::internal::WireFormat::PARSE,
                    "messages.ChosenPartner.partner_name");
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.ChosenPartner)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.ChosenPartner)
    return false;
#undef DO_
  }
  
  void ChosenPartner::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.ChosenPartner)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    
    // optional string partner_name = 2;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->partner_name().data(),
              static_cast<int>(this->partner_name().length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.ChosenPartner.partner_name");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2,
                                                                            this->partner_name(),
                                                                            output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.ChosenPartner)
  }
  
  ::google::protobuf::uint8*
  ChosenPartner::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.ChosenPartner)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    
    // optional string partner_name = 2;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->partner_name().data(),
              static_cast<int>(this->partner_name().length()),
              ::google::protobuf::internal::WireFormat::SERIALIZE,
              "messages.ChosenPartner.partner_name");
      target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
              2, this->partner_name(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.ChosenPartner)
    return target;
  }
  
  size_t ChosenPartner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.ChosenPartner)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    // optional string partner_name = 2;
    if (has_partner_name()) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->partner_name());
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void ChosenPartner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.ChosenPartner)
            GOOGLE_DCHECK_NE(&from, this);
    const ChosenPartner* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const ChosenPartner
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.ChosenPartner)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.ChosenPartner)
      MergeFrom(*source);
    }
  }
  
  void ChosenPartner::MergeFrom(const ChosenPartner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.ChosenPartner)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 3u) {
      if (cached_has_bits & 0x00000001u) {
        set_has_partner_name();
        partner_name_.AssignWithDefault(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                from.partner_name_);
      }
      if (cached_has_bits & 0x00000002u) {
        session_id_ = from.session_id_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }
  
  void ChosenPartner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.ChosenPartner)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void ChosenPartner::CopyFrom(const ChosenPartner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.ChosenPartner)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool ChosenPartner::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000002) != 0x00000002)
      return false;
    return true;
  }
  
  void ChosenPartner::Swap(ChosenPartner* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void ChosenPartner::InternalSwap(ChosenPartner* other) {
    using std::swap;
    partner_name_.Swap(&other->partner_name_,
                       &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                       GetArenaNoVirtual());
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata ChosenPartner::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// ===================================================================
  
  void UpdateIncomingMessages::InitAsDefaultInstance() {
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int UpdateIncomingMessages::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
  
  UpdateIncomingMessages::UpdateIncomingMessages() :
          ::google::protobuf::Message(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_UpdateIncomingMessages.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:messages.UpdateIncomingMessages)
  }
  
  UpdateIncomingMessages::UpdateIncomingMessages(const UpdateIncomingMessages& from) :
          ::google::protobuf::Message(), _internal_metadata_(NULL),
          _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    session_id_ = from.session_id_;
    // @@protoc_insertion_point(copy_constructor:messages.UpdateIncomingMessages)
  }
  
  void UpdateIncomingMessages::SharedCtor() {
    session_id_ = 0;
  }
  
  UpdateIncomingMessages::~UpdateIncomingMessages() {
    // @@protoc_insertion_point(destructor:messages.UpdateIncomingMessages)
    SharedDtor();
  }
  
  void UpdateIncomingMessages::SharedDtor() {
  }
  
  void UpdateIncomingMessages::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  
  const ::google::protobuf::Descriptor* UpdateIncomingMessages::descriptor() {
    ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
  }
  
  const UpdateIncomingMessages& UpdateIncomingMessages::default_instance() {
    ::google::protobuf::internal::InitSCC(
            &protobuf_message_2eproto::scc_info_UpdateIncomingMessages.base);
    return *internal_default_instance();
  }
  
  void UpdateIncomingMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.UpdateIncomingMessages)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;
    session_id_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear();
  }
  
  bool UpdateIncomingMessages::MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input
  ) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:messages.UpdateIncomingMessages)
    for (;;) {
      ::std::pair<
              ::google::protobuf::uint32, bool
      > p = input->ReadTagWithCutoffNoLastTag(127u);
      tag = p.first;
      if (!p.second)
        goto handle_unusual;
      switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(
              tag)) {
        // required int32 session_id = 1;
        case 1: {
          if (static_cast< ::google::protobuf::uint8>(tag) ==
              static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
            set_has_session_id();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32,
                    ::google::protobuf::internal::WireFormatLite::TYPE_INT32
            >(input, &session_id_)));
          } else {
            goto handle_unusual;
          }
          break;
        }
        default: {
handle_unusual:
          if (tag == 0) {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                  _internal_metadata_.mutable_unknown_fields()));
          break;
        }
      }
    }
success:
    // @@protoc_insertion_point(parse_success:messages.UpdateIncomingMessages)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:messages.UpdateIncomingMessages)
    return false;
#undef DO_
  }
  
  void UpdateIncomingMessages::SerializeWithCachedSizes(
          ::google::protobuf::io::CodedOutputStream* output
  ) const {
    // @@protoc_insertion_point(serialize_start:messages.UpdateIncomingMessages)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1,
                                                               this->session_id(),
                                                               output);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
              _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:messages.UpdateIncomingMessages)
  }
  
  ::google::protobuf::uint8*
  UpdateIncomingMessages::InternalSerializeWithCachedSizesToArray(
          bool deterministic, ::google::protobuf::uint8* target
  ) const {
    (void) deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:messages.UpdateIncomingMessages)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    cached_has_bits = _has_bits_[0];
    // required int32 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
              1, this->session_id(), target);
    }
    if (_internal_metadata_.have_unknown_fields()) {
      target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:messages.UpdateIncomingMessages)
    return target;
  }
  
  size_t UpdateIncomingMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.UpdateIncomingMessages)
    size_t total_size = 0;
    if (_internal_metadata_.have_unknown_fields()) {
      total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
              _internal_metadata_.unknown_fields());
    }
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->session_id());
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }
  
  void
  UpdateIncomingMessages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.UpdateIncomingMessages)
            GOOGLE_DCHECK_NE(&from, this);
    const UpdateIncomingMessages* source = ::google::protobuf::internal::DynamicCastToGenerated<
            const UpdateIncomingMessages
    >(&from);
    if (source == NULL) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.UpdateIncomingMessages)
      ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.UpdateIncomingMessages)
      MergeFrom(*source);
    }
  }
  
  void UpdateIncomingMessages::MergeFrom(const UpdateIncomingMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.UpdateIncomingMessages)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  
  void
  UpdateIncomingMessages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.UpdateIncomingMessages)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  void UpdateIncomingMessages::CopyFrom(const UpdateIncomingMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.UpdateIncomingMessages)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }
  
  bool UpdateIncomingMessages::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
      return false;
    return true;
  }
  
  void UpdateIncomingMessages::Swap(UpdateIncomingMessages* other) {
    if (other == this)
      return;
    InternalSwap(other);
  }
  
  void UpdateIncomingMessages::InternalSwap(UpdateIncomingMessages* other) {
    using std::swap;
    swap(session_id_, other->session_id_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
  }
  
  ::google::protobuf::Metadata UpdateIncomingMessages::GetMetadata() const {
    protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
  }


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
namespace google {
  namespace protobuf {
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::GetListOfClients*
    Arena::CreateMaybeMessage<::messages::GetListOfClients>(Arena* arena) {
      return Arena::CreateInternal<::messages::GetListOfClients>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::ListOfClients*
    Arena::CreateMaybeMessage<::messages::ListOfClients>(Arena* arena) {
      return Arena::CreateInternal<::messages::ListOfClients>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::CreateChat*
    Arena::CreateMaybeMessage<::messages::CreateChat>(Arena* arena) {
      return Arena::CreateInternal<::messages::CreateChat>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::AcknolageCreatingChat*
    Arena::CreateMaybeMessage<::messages::AcknolageCreatingChat>(Arena* arena) {
      return Arena::CreateInternal<::messages::AcknolageCreatingChat>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::CreateChatAcknolagement*
    Arena::CreateMaybeMessage<
            ::messages::CreateChatAcknolagement
    >(Arena* arena) {
      return Arena::CreateInternal<::messages::CreateChatAcknolagement>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::ExitChat*
    Arena::CreateMaybeMessage<::messages::ExitChat>(Arena* arena) {
      return Arena::CreateInternal<::messages::ExitChat>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::Message*
    Arena::CreateMaybeMessage<::messages::Message>(Arena* arena) {
      return Arena::CreateInternal<::messages::Message>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::KeepAliveChatRequest*
    Arena::CreateMaybeMessage<::messages::KeepAliveChatRequest>(Arena* arena) {
      return Arena::CreateInternal<::messages::KeepAliveChatRequest>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::KeepAliveChatAnswer*
    Arena::CreateMaybeMessage<::messages::KeepAliveChatAnswer>(Arena* arena) {
      return Arena::CreateInternal<::messages::KeepAliveChatAnswer>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::NoMessagesLeft*
    Arena::CreateMaybeMessage<::messages::NoMessagesLeft>(Arena* arena) {
      return Arena::CreateInternal<::messages::NoMessagesLeft>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::UpdateChatRequest*
    Arena::CreateMaybeMessage<::messages::UpdateChatRequest>(Arena* arena) {
      return Arena::CreateInternal<::messages::UpdateChatRequest>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::ChatRequests*
    Arena::CreateMaybeMessage<::messages::ChatRequests>(Arena* arena) {
      return Arena::CreateInternal<::messages::ChatRequests>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::ChosenPartner*
    Arena::CreateMaybeMessage<::messages::ChosenPartner>(Arena* arena) {
      return Arena::CreateInternal<::messages::ChosenPartner>(arena);
    }
    
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::messages::UpdateIncomingMessages*
    Arena::CreateMaybeMessage<
            ::messages::UpdateIncomingMessages
    >(Arena* arena) {
      return Arena::CreateInternal<::messages::UpdateIncomingMessages>(arena);
    }
  }  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
