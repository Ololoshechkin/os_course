// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_INCLUDED_message_2eproto
#define PROTOBUF_INCLUDED_message_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto 

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_message_2eproto
namespace messages {
class AcknolageCreatingChat;
class AcknolageCreatingChatDefaultTypeInternal;
extern AcknolageCreatingChatDefaultTypeInternal _AcknolageCreatingChat_default_instance_;
class ChatRequests;
class ChatRequestsDefaultTypeInternal;
extern ChatRequestsDefaultTypeInternal _ChatRequests_default_instance_;
class ChosenPartner;
class ChosenPartnerDefaultTypeInternal;
extern ChosenPartnerDefaultTypeInternal _ChosenPartner_default_instance_;
class CreateChat;
class CreateChatDefaultTypeInternal;
extern CreateChatDefaultTypeInternal _CreateChat_default_instance_;
class CreateChatAcknolagement;
class CreateChatAcknolagementDefaultTypeInternal;
extern CreateChatAcknolagementDefaultTypeInternal _CreateChatAcknolagement_default_instance_;
class ExitChat;
class ExitChatDefaultTypeInternal;
extern ExitChatDefaultTypeInternal _ExitChat_default_instance_;
class GetListOfClients;
class GetListOfClientsDefaultTypeInternal;
extern GetListOfClientsDefaultTypeInternal _GetListOfClients_default_instance_;
class KeepAliveChatAnswer;
class KeepAliveChatAnswerDefaultTypeInternal;
extern KeepAliveChatAnswerDefaultTypeInternal _KeepAliveChatAnswer_default_instance_;
class KeepAliveChatRequest;
class KeepAliveChatRequestDefaultTypeInternal;
extern KeepAliveChatRequestDefaultTypeInternal _KeepAliveChatRequest_default_instance_;
class ListOfClients;
class ListOfClientsDefaultTypeInternal;
extern ListOfClientsDefaultTypeInternal _ListOfClients_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class NoMessagesLeft;
class NoMessagesLeftDefaultTypeInternal;
extern NoMessagesLeftDefaultTypeInternal _NoMessagesLeft_default_instance_;
class UpdateChatRequest;
class UpdateChatRequestDefaultTypeInternal;
extern UpdateChatRequestDefaultTypeInternal _UpdateChatRequest_default_instance_;
class UpdateIncomingMessages;
class UpdateIncomingMessagesDefaultTypeInternal;
extern UpdateIncomingMessagesDefaultTypeInternal _UpdateIncomingMessages_default_instance_;
}  // namespace messages
namespace google {
namespace protobuf {
template<> ::messages::AcknolageCreatingChat* Arena::CreateMaybeMessage<::messages::AcknolageCreatingChat>(Arena*);
template<> ::messages::ChatRequests* Arena::CreateMaybeMessage<::messages::ChatRequests>(Arena*);
template<> ::messages::ChosenPartner* Arena::CreateMaybeMessage<::messages::ChosenPartner>(Arena*);
template<> ::messages::CreateChat* Arena::CreateMaybeMessage<::messages::CreateChat>(Arena*);
template<> ::messages::CreateChatAcknolagement* Arena::CreateMaybeMessage<::messages::CreateChatAcknolagement>(Arena*);
template<> ::messages::ExitChat* Arena::CreateMaybeMessage<::messages::ExitChat>(Arena*);
template<> ::messages::GetListOfClients* Arena::CreateMaybeMessage<::messages::GetListOfClients>(Arena*);
template<> ::messages::KeepAliveChatAnswer* Arena::CreateMaybeMessage<::messages::KeepAliveChatAnswer>(Arena*);
template<> ::messages::KeepAliveChatRequest* Arena::CreateMaybeMessage<::messages::KeepAliveChatRequest>(Arena*);
template<> ::messages::ListOfClients* Arena::CreateMaybeMessage<::messages::ListOfClients>(Arena*);
template<> ::messages::Message* Arena::CreateMaybeMessage<::messages::Message>(Arena*);
template<> ::messages::NoMessagesLeft* Arena::CreateMaybeMessage<::messages::NoMessagesLeft>(Arena*);
template<> ::messages::UpdateChatRequest* Arena::CreateMaybeMessage<::messages::UpdateChatRequest>(Arena*);
template<> ::messages::UpdateIncomingMessages* Arena::CreateMaybeMessage<::messages::UpdateIncomingMessages>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace messages {

// ===================================================================

class GetListOfClients : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.GetListOfClients) */ {
 public:
  GetListOfClients();
  virtual ~GetListOfClients();

  GetListOfClients(const GetListOfClients& from);

  inline GetListOfClients& operator=(const GetListOfClients& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetListOfClients(GetListOfClients&& from) noexcept
    : GetListOfClients() {
    *this = ::std::move(from);
  }

  inline GetListOfClients& operator=(GetListOfClients&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetListOfClients& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetListOfClients* internal_default_instance() {
    return reinterpret_cast<const GetListOfClients*>(
               &_GetListOfClients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetListOfClients* other);
  friend void swap(GetListOfClients& a, GetListOfClients& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetListOfClients* New() const final {
    return CreateMaybeMessage<GetListOfClients>(NULL);
  }

  GetListOfClients* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetListOfClients>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetListOfClients& from);
  void MergeFrom(const GetListOfClients& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListOfClients* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.GetListOfClients)
 private:
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListOfClients : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.ListOfClients) */ {
 public:
  ListOfClients();
  virtual ~ListOfClients();

  ListOfClients(const ListOfClients& from);

  inline ListOfClients& operator=(const ListOfClients& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOfClients(ListOfClients&& from) noexcept
    : ListOfClients() {
    *this = ::std::move(from);
  }

  inline ListOfClients& operator=(ListOfClients&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOfClients& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOfClients* internal_default_instance() {
    return reinterpret_cast<const ListOfClients*>(
               &_ListOfClients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListOfClients* other);
  friend void swap(ListOfClients& a, ListOfClients& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOfClients* New() const final {
    return CreateMaybeMessage<ListOfClients>(NULL);
  }

  ListOfClients* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOfClients>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOfClients& from);
  void MergeFrom(const ListOfClients& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOfClients* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string client_names = 2;
  int client_names_size() const;
  void clear_client_names();
  static const int kClientNamesFieldNumber = 2;
  const ::std::string& client_names(int index) const;
  ::std::string* mutable_client_names(int index);
  void set_client_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_client_names(int index, ::std::string&& value);
  #endif
  void set_client_names(int index, const char* value);
  void set_client_names(int index, const char* value, size_t size);
  ::std::string* add_client_names();
  void add_client_names(const ::std::string& value);
  #if LANG_CXX11
  void add_client_names(::std::string&& value);
  #endif
  void add_client_names(const char* value);
  void add_client_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& client_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_client_names();

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.ListOfClients)
 private:
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> client_names_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateChat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.CreateChat) */ {
 public:
  CreateChat();
  virtual ~CreateChat();

  CreateChat(const CreateChat& from);

  inline CreateChat& operator=(const CreateChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateChat(CreateChat&& from) noexcept
    : CreateChat() {
    *this = ::std::move(from);
  }

  inline CreateChat& operator=(CreateChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChat* internal_default_instance() {
    return reinterpret_cast<const CreateChat*>(
               &_CreateChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateChat* other);
  friend void swap(CreateChat& a, CreateChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateChat* New() const final {
    return CreateMaybeMessage<CreateChat>(NULL);
  }

  CreateChat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateChat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateChat& from);
  void MergeFrom(const CreateChat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string client_name = 2;
  bool has_client_name() const;
  void clear_client_name();
  static const int kClientNameFieldNumber = 2;
  const ::std::string& client_name() const;
  void set_client_name(const ::std::string& value);
  #if LANG_CXX11
  void set_client_name(::std::string&& value);
  #endif
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  ::std::string* mutable_client_name();
  ::std::string* release_client_name();
  void set_allocated_client_name(::std::string* client_name);

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.CreateChat)
 private:
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_client_name();
  void clear_has_client_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr client_name_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AcknolageCreatingChat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.AcknolageCreatingChat) */ {
 public:
  AcknolageCreatingChat();
  virtual ~AcknolageCreatingChat();

  AcknolageCreatingChat(const AcknolageCreatingChat& from);

  inline AcknolageCreatingChat& operator=(const AcknolageCreatingChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcknolageCreatingChat(AcknolageCreatingChat&& from) noexcept
    : AcknolageCreatingChat() {
    *this = ::std::move(from);
  }

  inline AcknolageCreatingChat& operator=(AcknolageCreatingChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcknolageCreatingChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcknolageCreatingChat* internal_default_instance() {
    return reinterpret_cast<const AcknolageCreatingChat*>(
               &_AcknolageCreatingChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AcknolageCreatingChat* other);
  friend void swap(AcknolageCreatingChat& a, AcknolageCreatingChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcknolageCreatingChat* New() const final {
    return CreateMaybeMessage<AcknolageCreatingChat>(NULL);
  }

  AcknolageCreatingChat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AcknolageCreatingChat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AcknolageCreatingChat& from);
  void MergeFrom(const AcknolageCreatingChat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcknolageCreatingChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string creator_client_name = 2;
  bool has_creator_client_name() const;
  void clear_creator_client_name();
  static const int kCreatorClientNameFieldNumber = 2;
  const ::std::string& creator_client_name() const;
  void set_creator_client_name(const ::std::string& value);
  #if LANG_CXX11
  void set_creator_client_name(::std::string&& value);
  #endif
  void set_creator_client_name(const char* value);
  void set_creator_client_name(const char* value, size_t size);
  ::std::string* mutable_creator_client_name();
  ::std::string* release_creator_client_name();
  void set_allocated_creator_client_name(::std::string* creator_client_name);

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.AcknolageCreatingChat)
 private:
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_creator_client_name();
  void clear_has_creator_client_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr creator_client_name_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateChatAcknolagement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.CreateChatAcknolagement) */ {
 public:
  CreateChatAcknolagement();
  virtual ~CreateChatAcknolagement();

  CreateChatAcknolagement(const CreateChatAcknolagement& from);

  inline CreateChatAcknolagement& operator=(const CreateChatAcknolagement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateChatAcknolagement(CreateChatAcknolagement&& from) noexcept
    : CreateChatAcknolagement() {
    *this = ::std::move(from);
  }

  inline CreateChatAcknolagement& operator=(CreateChatAcknolagement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChatAcknolagement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChatAcknolagement* internal_default_instance() {
    return reinterpret_cast<const CreateChatAcknolagement*>(
               &_CreateChatAcknolagement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CreateChatAcknolagement* other);
  friend void swap(CreateChatAcknolagement& a, CreateChatAcknolagement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateChatAcknolagement* New() const final {
    return CreateMaybeMessage<CreateChatAcknolagement>(NULL);
  }

  CreateChatAcknolagement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateChatAcknolagement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateChatAcknolagement& from);
  void MergeFrom(const CreateChatAcknolagement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChatAcknolagement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // required bool acknolaged = 2;
  bool has_acknolaged() const;
  void clear_acknolaged();
  static const int kAcknolagedFieldNumber = 2;
  bool acknolaged() const;
  void set_acknolaged(bool value);

  // @@protoc_insertion_point(class_scope:messages.CreateChatAcknolagement)
 private:
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_acknolaged();
  void clear_has_acknolaged();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 session_id_;
  bool acknolaged_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExitChat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.ExitChat) */ {
 public:
  ExitChat();
  virtual ~ExitChat();

  ExitChat(const ExitChat& from);

  inline ExitChat& operator=(const ExitChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExitChat(ExitChat&& from) noexcept
    : ExitChat() {
    *this = ::std::move(from);
  }

  inline ExitChat& operator=(ExitChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExitChat* internal_default_instance() {
    return reinterpret_cast<const ExitChat*>(
               &_ExitChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ExitChat* other);
  friend void swap(ExitChat& a, ExitChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExitChat* New() const final {
    return CreateMaybeMessage<ExitChat>(NULL);
  }

  ExitChat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExitChat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExitChat& from);
  void MergeFrom(const ExitChat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExitChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.ExitChat)
 private:
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message_content = 2;
  bool has_message_content() const;
  void clear_message_content();
  static const int kMessageContentFieldNumber = 2;
  const ::std::string& message_content() const;
  void set_message_content(const ::std::string& value);
  #if LANG_CXX11
  void set_message_content(::std::string&& value);
  #endif
  void set_message_content(const char* value);
  void set_message_content(const char* value, size_t size);
  ::std::string* mutable_message_content();
  ::std::string* release_message_content();
  void set_allocated_message_content(::std::string* message_content);

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.Message)
 private:
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_message_content();
  void clear_has_message_content();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_content_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeepAliveChatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.KeepAliveChatRequest) */ {
 public:
  KeepAliveChatRequest();
  virtual ~KeepAliveChatRequest();

  KeepAliveChatRequest(const KeepAliveChatRequest& from);

  inline KeepAliveChatRequest& operator=(const KeepAliveChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeepAliveChatRequest(KeepAliveChatRequest&& from) noexcept
    : KeepAliveChatRequest() {
    *this = ::std::move(from);
  }

  inline KeepAliveChatRequest& operator=(KeepAliveChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAliveChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeepAliveChatRequest* internal_default_instance() {
    return reinterpret_cast<const KeepAliveChatRequest*>(
               &_KeepAliveChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(KeepAliveChatRequest* other);
  friend void swap(KeepAliveChatRequest& a, KeepAliveChatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeepAliveChatRequest* New() const final {
    return CreateMaybeMessage<KeepAliveChatRequest>(NULL);
  }

  KeepAliveChatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeepAliveChatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeepAliveChatRequest& from);
  void MergeFrom(const KeepAliveChatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAliveChatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.KeepAliveChatRequest)
 private:
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeepAliveChatAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.KeepAliveChatAnswer) */ {
 public:
  KeepAliveChatAnswer();
  virtual ~KeepAliveChatAnswer();

  KeepAliveChatAnswer(const KeepAliveChatAnswer& from);

  inline KeepAliveChatAnswer& operator=(const KeepAliveChatAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeepAliveChatAnswer(KeepAliveChatAnswer&& from) noexcept
    : KeepAliveChatAnswer() {
    *this = ::std::move(from);
  }

  inline KeepAliveChatAnswer& operator=(KeepAliveChatAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAliveChatAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeepAliveChatAnswer* internal_default_instance() {
    return reinterpret_cast<const KeepAliveChatAnswer*>(
               &_KeepAliveChatAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(KeepAliveChatAnswer* other);
  friend void swap(KeepAliveChatAnswer& a, KeepAliveChatAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeepAliveChatAnswer* New() const final {
    return CreateMaybeMessage<KeepAliveChatAnswer>(NULL);
  }

  KeepAliveChatAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeepAliveChatAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeepAliveChatAnswer& from);
  void MergeFrom(const KeepAliveChatAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAliveChatAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // required bool still_in_chat = 2;
  bool has_still_in_chat() const;
  void clear_still_in_chat();
  static const int kStillInChatFieldNumber = 2;
  bool still_in_chat() const;
  void set_still_in_chat(bool value);

  // @@protoc_insertion_point(class_scope:messages.KeepAliveChatAnswer)
 private:
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_still_in_chat();
  void clear_has_still_in_chat();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 session_id_;
  bool still_in_chat_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoMessagesLeft : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.NoMessagesLeft) */ {
 public:
  NoMessagesLeft();
  virtual ~NoMessagesLeft();

  NoMessagesLeft(const NoMessagesLeft& from);

  inline NoMessagesLeft& operator=(const NoMessagesLeft& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NoMessagesLeft(NoMessagesLeft&& from) noexcept
    : NoMessagesLeft() {
    *this = ::std::move(from);
  }

  inline NoMessagesLeft& operator=(NoMessagesLeft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoMessagesLeft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoMessagesLeft* internal_default_instance() {
    return reinterpret_cast<const NoMessagesLeft*>(
               &_NoMessagesLeft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(NoMessagesLeft* other);
  friend void swap(NoMessagesLeft& a, NoMessagesLeft& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoMessagesLeft* New() const final {
    return CreateMaybeMessage<NoMessagesLeft>(NULL);
  }

  NoMessagesLeft* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NoMessagesLeft>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NoMessagesLeft& from);
  void MergeFrom(const NoMessagesLeft& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoMessagesLeft* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.NoMessagesLeft)
 private:
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateChatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.UpdateChatRequest) */ {
 public:
  UpdateChatRequest();
  virtual ~UpdateChatRequest();

  UpdateChatRequest(const UpdateChatRequest& from);

  inline UpdateChatRequest& operator=(const UpdateChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateChatRequest(UpdateChatRequest&& from) noexcept
    : UpdateChatRequest() {
    *this = ::std::move(from);
  }

  inline UpdateChatRequest& operator=(UpdateChatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateChatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateChatRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateChatRequest*>(
               &_UpdateChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(UpdateChatRequest* other);
  friend void swap(UpdateChatRequest& a, UpdateChatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateChatRequest* New() const final {
    return CreateMaybeMessage<UpdateChatRequest>(NULL);
  }

  UpdateChatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateChatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateChatRequest& from);
  void MergeFrom(const UpdateChatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateChatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.UpdateChatRequest)
 private:
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatRequests : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.ChatRequests) */ {
 public:
  ChatRequests();
  virtual ~ChatRequests();

  ChatRequests(const ChatRequests& from);

  inline ChatRequests& operator=(const ChatRequests& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatRequests(ChatRequests&& from) noexcept
    : ChatRequests() {
    *this = ::std::move(from);
  }

  inline ChatRequests& operator=(ChatRequests&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRequests& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRequests* internal_default_instance() {
    return reinterpret_cast<const ChatRequests*>(
               &_ChatRequests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ChatRequests* other);
  friend void swap(ChatRequests& a, ChatRequests& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatRequests* New() const final {
    return CreateMaybeMessage<ChatRequests>(NULL);
  }

  ChatRequests* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatRequests>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatRequests& from);
  void MergeFrom(const ChatRequests& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRequests* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string partner_names = 2;
  int partner_names_size() const;
  void clear_partner_names();
  static const int kPartnerNamesFieldNumber = 2;
  const ::std::string& partner_names(int index) const;
  ::std::string* mutable_partner_names(int index);
  void set_partner_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_partner_names(int index, ::std::string&& value);
  #endif
  void set_partner_names(int index, const char* value);
  void set_partner_names(int index, const char* value, size_t size);
  ::std::string* add_partner_names();
  void add_partner_names(const ::std::string& value);
  #if LANG_CXX11
  void add_partner_names(::std::string&& value);
  #endif
  void add_partner_names(const char* value);
  void add_partner_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& partner_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_partner_names();

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.ChatRequests)
 private:
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> partner_names_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChosenPartner : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.ChosenPartner) */ {
 public:
  ChosenPartner();
  virtual ~ChosenPartner();

  ChosenPartner(const ChosenPartner& from);

  inline ChosenPartner& operator=(const ChosenPartner& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChosenPartner(ChosenPartner&& from) noexcept
    : ChosenPartner() {
    *this = ::std::move(from);
  }

  inline ChosenPartner& operator=(ChosenPartner&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChosenPartner& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChosenPartner* internal_default_instance() {
    return reinterpret_cast<const ChosenPartner*>(
               &_ChosenPartner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ChosenPartner* other);
  friend void swap(ChosenPartner& a, ChosenPartner& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChosenPartner* New() const final {
    return CreateMaybeMessage<ChosenPartner>(NULL);
  }

  ChosenPartner* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChosenPartner>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChosenPartner& from);
  void MergeFrom(const ChosenPartner& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChosenPartner* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string partner_name = 2;
  bool has_partner_name() const;
  void clear_partner_name();
  static const int kPartnerNameFieldNumber = 2;
  const ::std::string& partner_name() const;
  void set_partner_name(const ::std::string& value);
  #if LANG_CXX11
  void set_partner_name(::std::string&& value);
  #endif
  void set_partner_name(const char* value);
  void set_partner_name(const char* value, size_t size);
  ::std::string* mutable_partner_name();
  ::std::string* release_partner_name();
  void set_allocated_partner_name(::std::string* partner_name);

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.ChosenPartner)
 private:
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_partner_name();
  void clear_has_partner_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr partner_name_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateIncomingMessages : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.UpdateIncomingMessages) */ {
 public:
  UpdateIncomingMessages();
  virtual ~UpdateIncomingMessages();

  UpdateIncomingMessages(const UpdateIncomingMessages& from);

  inline UpdateIncomingMessages& operator=(const UpdateIncomingMessages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateIncomingMessages(UpdateIncomingMessages&& from) noexcept
    : UpdateIncomingMessages() {
    *this = ::std::move(from);
  }

  inline UpdateIncomingMessages& operator=(UpdateIncomingMessages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateIncomingMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateIncomingMessages* internal_default_instance() {
    return reinterpret_cast<const UpdateIncomingMessages*>(
               &_UpdateIncomingMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(UpdateIncomingMessages* other);
  friend void swap(UpdateIncomingMessages& a, UpdateIncomingMessages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateIncomingMessages* New() const final {
    return CreateMaybeMessage<UpdateIncomingMessages>(NULL);
  }

  UpdateIncomingMessages* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateIncomingMessages>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateIncomingMessages& from);
  void MergeFrom(const UpdateIncomingMessages& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateIncomingMessages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.UpdateIncomingMessages)
 private:
  void set_has_session_id();
  void clear_has_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 session_id_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetListOfClients

// required int32 session_id = 1;
inline bool GetListOfClients::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetListOfClients::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetListOfClients::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetListOfClients::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 GetListOfClients::session_id() const {
  // @@protoc_insertion_point(field_get:messages.GetListOfClients.session_id)
  return session_id_;
}
inline void GetListOfClients::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.GetListOfClients.session_id)
}

// -------------------------------------------------------------------

// ListOfClients

// required int32 session_id = 1;
inline bool ListOfClients::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListOfClients::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListOfClients::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListOfClients::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 ListOfClients::session_id() const {
  // @@protoc_insertion_point(field_get:messages.ListOfClients.session_id)
  return session_id_;
}
inline void ListOfClients::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.ListOfClients.session_id)
}

// repeated string client_names = 2;
inline int ListOfClients::client_names_size() const {
  return client_names_.size();
}
inline void ListOfClients::clear_client_names() {
  client_names_.Clear();
}
inline const ::std::string& ListOfClients::client_names(int index) const {
  // @@protoc_insertion_point(field_get:messages.ListOfClients.client_names)
  return client_names_.Get(index);
}
inline ::std::string* ListOfClients::mutable_client_names(int index) {
  // @@protoc_insertion_point(field_mutable:messages.ListOfClients.client_names)
  return client_names_.Mutable(index);
}
inline void ListOfClients::set_client_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:messages.ListOfClients.client_names)
  client_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListOfClients::set_client_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:messages.ListOfClients.client_names)
  client_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListOfClients::set_client_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  client_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:messages.ListOfClients.client_names)
}
inline void ListOfClients::set_client_names(int index, const char* value, size_t size) {
  client_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messages.ListOfClients.client_names)
}
inline ::std::string* ListOfClients::add_client_names() {
  // @@protoc_insertion_point(field_add_mutable:messages.ListOfClients.client_names)
  return client_names_.Add();
}
inline void ListOfClients::add_client_names(const ::std::string& value) {
  client_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:messages.ListOfClients.client_names)
}
#if LANG_CXX11
inline void ListOfClients::add_client_names(::std::string&& value) {
  client_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:messages.ListOfClients.client_names)
}
#endif
inline void ListOfClients::add_client_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  client_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:messages.ListOfClients.client_names)
}
inline void ListOfClients::add_client_names(const char* value, size_t size) {
  client_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:messages.ListOfClients.client_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListOfClients::client_names() const {
  // @@protoc_insertion_point(field_list:messages.ListOfClients.client_names)
  return client_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListOfClients::mutable_client_names() {
  // @@protoc_insertion_point(field_mutable_list:messages.ListOfClients.client_names)
  return &client_names_;
}

// -------------------------------------------------------------------

// CreateChat

// required int32 session_id = 1;
inline bool CreateChat::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateChat::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateChat::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateChat::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 CreateChat::session_id() const {
  // @@protoc_insertion_point(field_get:messages.CreateChat.session_id)
  return session_id_;
}
inline void CreateChat::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.CreateChat.session_id)
}

// required string client_name = 2;
inline bool CreateChat::has_client_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateChat::set_has_client_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateChat::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateChat::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_name();
}
inline const ::std::string& CreateChat::client_name() const {
  // @@protoc_insertion_point(field_get:messages.CreateChat.client_name)
  return client_name_.GetNoArena();
}
inline void CreateChat::set_client_name(const ::std::string& value) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.CreateChat.client_name)
}
#if LANG_CXX11
inline void CreateChat::set_client_name(::std::string&& value) {
  set_has_client_name();
  client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.CreateChat.client_name)
}
#endif
inline void CreateChat::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.CreateChat.client_name)
}
inline void CreateChat::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.CreateChat.client_name)
}
inline ::std::string* CreateChat::mutable_client_name() {
  set_has_client_name();
  // @@protoc_insertion_point(field_mutable:messages.CreateChat.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChat::release_client_name() {
  // @@protoc_insertion_point(field_release:messages.CreateChat.client_name)
  if (!has_client_name()) {
    return NULL;
  }
  clear_has_client_name();
  return client_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChat::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    set_has_client_name();
  } else {
    clear_has_client_name();
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:messages.CreateChat.client_name)
}

// -------------------------------------------------------------------

// AcknolageCreatingChat

// required int32 session_id = 1;
inline bool AcknolageCreatingChat::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcknolageCreatingChat::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcknolageCreatingChat::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcknolageCreatingChat::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 AcknolageCreatingChat::session_id() const {
  // @@protoc_insertion_point(field_get:messages.AcknolageCreatingChat.session_id)
  return session_id_;
}
inline void AcknolageCreatingChat::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.AcknolageCreatingChat.session_id)
}

// required string creator_client_name = 2;
inline bool AcknolageCreatingChat::has_creator_client_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcknolageCreatingChat::set_has_creator_client_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcknolageCreatingChat::clear_has_creator_client_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcknolageCreatingChat::clear_creator_client_name() {
  creator_client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creator_client_name();
}
inline const ::std::string& AcknolageCreatingChat::creator_client_name() const {
  // @@protoc_insertion_point(field_get:messages.AcknolageCreatingChat.creator_client_name)
  return creator_client_name_.GetNoArena();
}
inline void AcknolageCreatingChat::set_creator_client_name(const ::std::string& value) {
  set_has_creator_client_name();
  creator_client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.AcknolageCreatingChat.creator_client_name)
}
#if LANG_CXX11
inline void AcknolageCreatingChat::set_creator_client_name(::std::string&& value) {
  set_has_creator_client_name();
  creator_client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.AcknolageCreatingChat.creator_client_name)
}
#endif
inline void AcknolageCreatingChat::set_creator_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_creator_client_name();
  creator_client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.AcknolageCreatingChat.creator_client_name)
}
inline void AcknolageCreatingChat::set_creator_client_name(const char* value, size_t size) {
  set_has_creator_client_name();
  creator_client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.AcknolageCreatingChat.creator_client_name)
}
inline ::std::string* AcknolageCreatingChat::mutable_creator_client_name() {
  set_has_creator_client_name();
  // @@protoc_insertion_point(field_mutable:messages.AcknolageCreatingChat.creator_client_name)
  return creator_client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcknolageCreatingChat::release_creator_client_name() {
  // @@protoc_insertion_point(field_release:messages.AcknolageCreatingChat.creator_client_name)
  if (!has_creator_client_name()) {
    return NULL;
  }
  clear_has_creator_client_name();
  return creator_client_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcknolageCreatingChat::set_allocated_creator_client_name(::std::string* creator_client_name) {
  if (creator_client_name != NULL) {
    set_has_creator_client_name();
  } else {
    clear_has_creator_client_name();
  }
  creator_client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_client_name);
  // @@protoc_insertion_point(field_set_allocated:messages.AcknolageCreatingChat.creator_client_name)
}

// -------------------------------------------------------------------

// CreateChatAcknolagement

// required int32 session_id = 1;
inline bool CreateChatAcknolagement::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateChatAcknolagement::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateChatAcknolagement::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateChatAcknolagement::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 CreateChatAcknolagement::session_id() const {
  // @@protoc_insertion_point(field_get:messages.CreateChatAcknolagement.session_id)
  return session_id_;
}
inline void CreateChatAcknolagement::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.CreateChatAcknolagement.session_id)
}

// required bool acknolaged = 2;
inline bool CreateChatAcknolagement::has_acknolaged() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateChatAcknolagement::set_has_acknolaged() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateChatAcknolagement::clear_has_acknolaged() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateChatAcknolagement::clear_acknolaged() {
  acknolaged_ = false;
  clear_has_acknolaged();
}
inline bool CreateChatAcknolagement::acknolaged() const {
  // @@protoc_insertion_point(field_get:messages.CreateChatAcknolagement.acknolaged)
  return acknolaged_;
}
inline void CreateChatAcknolagement::set_acknolaged(bool value) {
  set_has_acknolaged();
  acknolaged_ = value;
  // @@protoc_insertion_point(field_set:messages.CreateChatAcknolagement.acknolaged)
}

// -------------------------------------------------------------------

// ExitChat

// required int32 session_id = 1;
inline bool ExitChat::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitChat::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitChat::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitChat::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 ExitChat::session_id() const {
  // @@protoc_insertion_point(field_get:messages.ExitChat.session_id)
  return session_id_;
}
inline void ExitChat::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.ExitChat.session_id)
}

// -------------------------------------------------------------------

// Message

// required int32 session_id = 1;
inline bool Message::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 Message::session_id() const {
  // @@protoc_insertion_point(field_get:messages.Message.session_id)
  return session_id_;
}
inline void Message::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.Message.session_id)
}

// required string message_content = 2;
inline bool Message::has_message_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_message_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_message_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_message_content() {
  message_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_content();
}
inline const ::std::string& Message::message_content() const {
  // @@protoc_insertion_point(field_get:messages.Message.message_content)
  return message_content_.GetNoArena();
}
inline void Message::set_message_content(const ::std::string& value) {
  set_has_message_content();
  message_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Message.message_content)
}
#if LANG_CXX11
inline void Message::set_message_content(::std::string&& value) {
  set_has_message_content();
  message_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Message.message_content)
}
#endif
inline void Message::set_message_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_content();
  message_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Message.message_content)
}
inline void Message::set_message_content(const char* value, size_t size) {
  set_has_message_content();
  message_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Message.message_content)
}
inline ::std::string* Message::mutable_message_content() {
  set_has_message_content();
  // @@protoc_insertion_point(field_mutable:messages.Message.message_content)
  return message_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_message_content() {
  // @@protoc_insertion_point(field_release:messages.Message.message_content)
  if (!has_message_content()) {
    return NULL;
  }
  clear_has_message_content();
  return message_content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_message_content(::std::string* message_content) {
  if (message_content != NULL) {
    set_has_message_content();
  } else {
    clear_has_message_content();
  }
  message_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_content);
  // @@protoc_insertion_point(field_set_allocated:messages.Message.message_content)
}

// -------------------------------------------------------------------

// KeepAliveChatRequest

// required int32 session_id = 1;
inline bool KeepAliveChatRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepAliveChatRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepAliveChatRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepAliveChatRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 KeepAliveChatRequest::session_id() const {
  // @@protoc_insertion_point(field_get:messages.KeepAliveChatRequest.session_id)
  return session_id_;
}
inline void KeepAliveChatRequest::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.KeepAliveChatRequest.session_id)
}

// -------------------------------------------------------------------

// KeepAliveChatAnswer

// required int32 session_id = 1;
inline bool KeepAliveChatAnswer::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepAliveChatAnswer::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepAliveChatAnswer::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepAliveChatAnswer::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 KeepAliveChatAnswer::session_id() const {
  // @@protoc_insertion_point(field_get:messages.KeepAliveChatAnswer.session_id)
  return session_id_;
}
inline void KeepAliveChatAnswer::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.KeepAliveChatAnswer.session_id)
}

// required bool still_in_chat = 2;
inline bool KeepAliveChatAnswer::has_still_in_chat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeepAliveChatAnswer::set_has_still_in_chat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeepAliveChatAnswer::clear_has_still_in_chat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeepAliveChatAnswer::clear_still_in_chat() {
  still_in_chat_ = false;
  clear_has_still_in_chat();
}
inline bool KeepAliveChatAnswer::still_in_chat() const {
  // @@protoc_insertion_point(field_get:messages.KeepAliveChatAnswer.still_in_chat)
  return still_in_chat_;
}
inline void KeepAliveChatAnswer::set_still_in_chat(bool value) {
  set_has_still_in_chat();
  still_in_chat_ = value;
  // @@protoc_insertion_point(field_set:messages.KeepAliveChatAnswer.still_in_chat)
}

// -------------------------------------------------------------------

// NoMessagesLeft

// required int32 session_id = 1;
inline bool NoMessagesLeft::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoMessagesLeft::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoMessagesLeft::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoMessagesLeft::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 NoMessagesLeft::session_id() const {
  // @@protoc_insertion_point(field_get:messages.NoMessagesLeft.session_id)
  return session_id_;
}
inline void NoMessagesLeft::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.NoMessagesLeft.session_id)
}

// -------------------------------------------------------------------

// UpdateChatRequest

// required int32 session_id = 1;
inline bool UpdateChatRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateChatRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateChatRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateChatRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 UpdateChatRequest::session_id() const {
  // @@protoc_insertion_point(field_get:messages.UpdateChatRequest.session_id)
  return session_id_;
}
inline void UpdateChatRequest::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.UpdateChatRequest.session_id)
}

// -------------------------------------------------------------------

// ChatRequests

// required int32 session_id = 1;
inline bool ChatRequests::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRequests::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRequests::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRequests::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 ChatRequests::session_id() const {
  // @@protoc_insertion_point(field_get:messages.ChatRequests.session_id)
  return session_id_;
}
inline void ChatRequests::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.ChatRequests.session_id)
}

// repeated string partner_names = 2;
inline int ChatRequests::partner_names_size() const {
  return partner_names_.size();
}
inline void ChatRequests::clear_partner_names() {
  partner_names_.Clear();
}
inline const ::std::string& ChatRequests::partner_names(int index) const {
  // @@protoc_insertion_point(field_get:messages.ChatRequests.partner_names)
  return partner_names_.Get(index);
}
inline ::std::string* ChatRequests::mutable_partner_names(int index) {
  // @@protoc_insertion_point(field_mutable:messages.ChatRequests.partner_names)
  return partner_names_.Mutable(index);
}
inline void ChatRequests::set_partner_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:messages.ChatRequests.partner_names)
  partner_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChatRequests::set_partner_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:messages.ChatRequests.partner_names)
  partner_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChatRequests::set_partner_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  partner_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:messages.ChatRequests.partner_names)
}
inline void ChatRequests::set_partner_names(int index, const char* value, size_t size) {
  partner_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messages.ChatRequests.partner_names)
}
inline ::std::string* ChatRequests::add_partner_names() {
  // @@protoc_insertion_point(field_add_mutable:messages.ChatRequests.partner_names)
  return partner_names_.Add();
}
inline void ChatRequests::add_partner_names(const ::std::string& value) {
  partner_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:messages.ChatRequests.partner_names)
}
#if LANG_CXX11
inline void ChatRequests::add_partner_names(::std::string&& value) {
  partner_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:messages.ChatRequests.partner_names)
}
#endif
inline void ChatRequests::add_partner_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  partner_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:messages.ChatRequests.partner_names)
}
inline void ChatRequests::add_partner_names(const char* value, size_t size) {
  partner_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:messages.ChatRequests.partner_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatRequests::partner_names() const {
  // @@protoc_insertion_point(field_list:messages.ChatRequests.partner_names)
  return partner_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatRequests::mutable_partner_names() {
  // @@protoc_insertion_point(field_mutable_list:messages.ChatRequests.partner_names)
  return &partner_names_;
}

// -------------------------------------------------------------------

// ChosenPartner

// required int32 session_id = 1;
inline bool ChosenPartner::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChosenPartner::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChosenPartner::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChosenPartner::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 ChosenPartner::session_id() const {
  // @@protoc_insertion_point(field_get:messages.ChosenPartner.session_id)
  return session_id_;
}
inline void ChosenPartner::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.ChosenPartner.session_id)
}

// optional string partner_name = 2;
inline bool ChosenPartner::has_partner_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChosenPartner::set_has_partner_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChosenPartner::clear_has_partner_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChosenPartner::clear_partner_name() {
  partner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partner_name();
}
inline const ::std::string& ChosenPartner::partner_name() const {
  // @@protoc_insertion_point(field_get:messages.ChosenPartner.partner_name)
  return partner_name_.GetNoArena();
}
inline void ChosenPartner::set_partner_name(const ::std::string& value) {
  set_has_partner_name();
  partner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.ChosenPartner.partner_name)
}
#if LANG_CXX11
inline void ChosenPartner::set_partner_name(::std::string&& value) {
  set_has_partner_name();
  partner_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.ChosenPartner.partner_name)
}
#endif
inline void ChosenPartner::set_partner_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_partner_name();
  partner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.ChosenPartner.partner_name)
}
inline void ChosenPartner::set_partner_name(const char* value, size_t size) {
  set_has_partner_name();
  partner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.ChosenPartner.partner_name)
}
inline ::std::string* ChosenPartner::mutable_partner_name() {
  set_has_partner_name();
  // @@protoc_insertion_point(field_mutable:messages.ChosenPartner.partner_name)
  return partner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChosenPartner::release_partner_name() {
  // @@protoc_insertion_point(field_release:messages.ChosenPartner.partner_name)
  if (!has_partner_name()) {
    return NULL;
  }
  clear_has_partner_name();
  return partner_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChosenPartner::set_allocated_partner_name(::std::string* partner_name) {
  if (partner_name != NULL) {
    set_has_partner_name();
  } else {
    clear_has_partner_name();
  }
  partner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partner_name);
  // @@protoc_insertion_point(field_set_allocated:messages.ChosenPartner.partner_name)
}

// -------------------------------------------------------------------

// UpdateIncomingMessages

// required int32 session_id = 1;
inline bool UpdateIncomingMessages::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateIncomingMessages::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateIncomingMessages::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateIncomingMessages::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 UpdateIncomingMessages::session_id() const {
  // @@protoc_insertion_point(field_get:messages.UpdateIncomingMessages.session_id)
  return session_id_;
}
inline void UpdateIncomingMessages::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:messages.UpdateIncomingMessages.session_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_message_2eproto
